name: staging-deploy
runs:
  using: composite
  steps:
    - name: Resolve image parameters
      id: meta
      shell: bash
      env:
        IN_BRANCH: ${{ inputs.branch }}
        IN_SHA:    ${{ inputs.sha }}
        IN_IMAGE:  ${{ inputs.image }}
      run: |
        set -euo pipefail
        TAG="${IN_SHA:-$IN_BRANCH}"
        IMAGE="${IN_IMAGE:-ghcr.io/${{ github.repository }}/storyapp}"
        echo "tag=$TAG" >> "$GITHUB_OUTPUT"
        echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

    - name: Build image
      shell: bash
      env:
        IMAGE: ${{ steps.meta.outputs.image }}
        TAG:   ${{ steps.meta.outputs.tag }}
      run: |
        set -euo pipefail
        DOCKER_BUILDKIT=1 docker build -t "${IMAGE}:${TAG}" .

    - name: Deploy to Staging via SSH (optional)
      shell: bash
      env:
        STAGING_HOST:    ${{ env.STAGING_HOST }}
        STAGING_USER:    ${{ env.STAGING_USER }}
        STAGING_SSH_KEY: ${{ env.STAGING_SSH_KEY }}
        IMAGE:           ${{ steps.meta.outputs.image }}
        TAG:             ${{ steps.meta.outputs.tag }}
      run: |
        set -euo pipefail
        if [[ -z "${STAGING_SSH_KEY:-}" || -z "${STAGING_HOST:-}" ]]; then
          echo "Skip SSH deploy"
          exit 0
        fi

        mkdir -p ~/.ssh && chmod 700 ~/.ssh
        echo "$STAGING_SSH_KEY" > ~/.ssh/id_ed25519 && chmod 600 ~/.ssh/id_ed25519
        TARGET="${STAGING_USER:+$STAGING_USER@}$STAGING_HOST"
        ssh -o StrictHostKeyChecking=no "$TARGET" 'command -v docker >/dev/null' || exit 1

        TAR_PATH=$(mktemp -p "${RUNNER_TEMP:-$PWD}" storyapp-image-XXXXXX.tar.gz)
        trap 'rm -f "$TAR_PATH"' EXIT

        echo "Saving image to $TAR_PATH"
        docker save "${IMAGE}:${TAG}" | gzip > "$TAR_PATH"

        if ! scp -o StrictHostKeyChecking=no "$TAR_PATH" "$TARGET:/tmp/storyapp-image.tar.gz"; then
          echo "::warning title=Skip staging deploy::无法通过SSH复制镜像，请检查 STAGING_HOST/STAGING_SSH_KEY 配置"
          exit 0
        fi

        REMOTE_IMAGE="${IMAGE}:${TAG}"
        REMOTE_CMD=$(cat <<'EOF')
          set -euo pipefail
          TAR=/tmp/storyapp-image.tar.gz
          docker load < "$TAR"
          rm -f "$TAR"
          docker stop storyapp 2>/dev/null || true
          docker rm   storyapp 2>/dev/null || true
          docker run -d --name storyapp -p 8080:8080 "$IMAGE_TAG"
          docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}' | head -n 2
        EOF
        if ! printf '%s\n' "$REMOTE_CMD" | ssh -o StrictHostKeyChecking=no "$TARGET" IMAGE_TAG="$REMOTE_IMAGE" bash -s; then
          echo "::warning title=Skip staging deploy::无法SSH执行部署命令，请检查凭据"
          exit 0
        fi
    - name: Notice
      shell: bash
      env:
        IMAGE: ${{ steps.meta.outputs.image }}
        TAG:   ${{ steps.meta.outputs.tag }}
      run: |
        echo "::notice title=Deploy:: image=${IMAGE}:${TAG}"

inputs:
  branch:
    description: Branch to deploy
    required: true
  sha:
    description: Optional commit SHA
    required: false
  image:
    description: Full image name
    required: false
