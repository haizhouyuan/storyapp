name: Docker CI/CD Pipeline

on:
  push:
    branches: [ master, main, feat/complete-containerization ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run -w backend ci
          npm run -w frontend ci --legacy-peer-deps

      - name: Run linting
        run: |
          npm run -w backend lint
          npm run -w frontend lint

      - name: Run type checking
        run: |
          npm run -w @storyapp/shared build
          npm run -w backend typecheck
          npm run -w frontend typecheck

      - name: Run unit tests
        run: |
          npm run -w backend test

  # Docker镜像构建和测试
  docker-build-test:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        environment: [test, staging]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Create environment file
        run: |
          cat > .env.${{ matrix.environment }} << EOF
          NODE_ENV=${{ matrix.environment }}
          MONGO_USER=${{ matrix.environment }}_user
          MONGO_PASS=${{ matrix.environment }}_pass123
          MONGO_DB=storyapp_${{ matrix.environment }}
          DEEPSEEK_API_KEY=mock_key_for_testing
          DEEPSEEK_API_URL=https://api.deepseek.com
          EOF

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=${{ matrix.environment }}
            NPM_REGISTRY=https://registry.npmmirror.com

      - name: Test container startup
        run: |
          # 使用构建的镜像启动测试环境
          bash scripts/deploy.sh ${{ matrix.environment }} up
          
          # 等待服务就绪
          timeout 120s bash -c 'until curl -f http://localhost:5001/healthz; do sleep 5; done'
          
          # 基本API测试
          curl -f http://localhost:5001/api/health
          
          # 停止服务
          bash scripts/deploy.sh ${{ matrix.environment }} down

  # E2E测试
  e2e-tests:
    runs-on: ubuntu-latest
    needs: docker-build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Playwright
        run: |
          npm ci
          npx playwright install --with-deps chromium

      - name: Create test environment
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          MONGO_USER=test_user
          MONGO_PASS=test_pass123
          MONGO_DB=storyapp_test
          DEEPSEEK_API_KEY=mock_key_for_testing
          DEEPSEEK_API_URL=https://api.deepseek.com
          EOF

      - name: Start test environment
        run: |
          bash scripts/deploy.sh test up
          timeout 120s bash -c 'until curl -f http://localhost:5001/healthz; do sleep 5; done'

      - name: Run E2E tests
        run: |
          TARGET_URL=http://localhost:5001 npm test
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Cleanup test environment
        if: always()
        run: bash scripts/deploy.sh test down

  # 生产镜像构建和推送
  docker-push:
    runs-on: ubuntu-latest
    needs: [code-quality, docker-build-test, e2e-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NODE_ENV=production
            NPM_REGISTRY=https://registry.npmmirror.com

  # 自动部署到预发布环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-push
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "🚀 Staging deployment would happen here"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # 实际部署逻辑：
          # 1. SSH到服务器
          # 2. 拉取新镜像
          # 3. 更新docker-compose配置
          # 4. 重启服务
          # 5. 健康检查

  # 生产部署（手动触发）
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-push
    if: startsWith(github.ref, 'refs/tags/')
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "🎯 Production deployment would happen here"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          # 生产部署逻辑：
          # 1. 蓝绿部署策略
          # 2. 数据库迁移
          # 3. 滚动更新
          # 4. 健康检查和回滚机制

  # 清理旧镜像
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 5
          delete-only-untagged-versions: false