name: Deploy to Staging on CI Success

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]  # 对应ci.yml的name，确保触发匹配
    types: [completed]

jobs:
  deploy-staging:
    # 只在CI成功且来自PR时部署
    if: >
      ${{
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.event == 'pull_request'
      }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      deployments: write
      pull-requests: write
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout PR commit
        uses: actions/checkout@v4
        with:
          # 签出触发CI的那次提交
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci --legacy-peer-deps

      - name: Build application
        run: |
          npm run build:shared
          npm run build:backend
          npm run build:frontend

      - name: Download build artifacts (if available)
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          run-id: ${{ github.event.workflow_run.id }}
          path: ./artifacts

      - name: Prepare deployment environment
        id: prepare
        run: |
          # 生成部署分支名称（用于隔离不同PR的测试环境）
          PR_NUMBER="${{ github.event.workflow_run.pull_requests[0].number }}"
          BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          DEPLOY_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | cut -c1-50)
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "deploy_branch=$DEPLOY_BRANCH" >> $GITHUB_OUTPUT
          echo "deploy_url=http://localhost:5001" >> $GITHUB_OUTPUT

      - name: Deploy to staging environment
        id: deploy
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY || 'sk-test-dummy' }}
          DEPLOY_BRANCH: ${{ steps.prepare.outputs.deploy_branch }}
        run: |
          # 本地容器化部署 - 避免外部服务器依赖
          echo "🚀 开始本地容器化部署到测试环境..."
          
          # 创建部署用的docker-compose配置
          cat > docker-compose.staging.yml << EOF
          version: '3.8'
          services:
            mongo:
              image: mongo:6.0
              environment:
                MONGO_INITDB_ROOT_USERNAME: root
                MONGO_INITDB_ROOT_PASSWORD: staging123
              ports:
                - "27017:27017"
              volumes:
                - mongo_data:/data/db
              healthcheck:
                test: echo 'db.runCommand("ping").ok' | mongosh --quiet
                interval: 30s
                timeout: 10s
                retries: 3
            
            app:
              build: .
              environment:
                NODE_ENV: staging
                PORT: 5001
                MONGODB_URI: mongodb://root:staging123@mongo:27017/storyapp?authSource=admin
                DEEPSEEK_API_KEY: $DEEPSEEK_API_KEY
              ports:
                - "5001:5001"
              depends_on:
                mongo:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5001/healthz"]
                interval: 30s
                timeout: 10s
                retries: 3
          
          volumes:
            mongo_data:
          EOF
          
          # 构建并启动服务
          docker compose -f docker-compose.staging.yml up -d --build
          
          # 等待服务启动
          echo "⏳ 等待服务启动..."
          timeout 120 bash -c 'until curl -f http://localhost:5001/healthz >/dev/null 2>&1; do sleep 5; done'
          
          # 设置输出变量
          echo "url=${{ steps.prepare.outputs.deploy_url }}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT
          
          echo "✅ 部署完成！"
          echo "🔗 本地测试环境: http://localhost:5001"

      - name: Run deployment verification tests
        if: steps.deploy.outputs.status == 'success'
        run: |
          echo "🧪 运行部署验证测试..."
          
          # 基础健康检查
          curl -f http://localhost:5001/healthz || exit 1
          
          # API接口测试
          curl -f http://localhost:5001/api/health || exit 1
          
          # 数据库连接测试
          curl -X POST http://localhost:5001/api/generate-story \
            -H "Content-Type: application/json" \
            -d '{"topic":"测试故事","maxChoices":3}' || exit 1
          
          echo "✅ 部署验证测试通过"

      - name: Comment deployment status on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_request_number: ${{ steps.prepare.outputs.pr_number }}
            });
            
            const deployStatus = '${{ steps.deploy.outputs.status }}';
            const deployUrl = '${{ steps.deploy.outputs.deploy_url }}';
            const branchName = '${{ steps.prepare.outputs.branch_name }}';
            
            let statusEmoji = '✅';
            let statusMessage = '部署成功';
            let deploymentInfo = `
            🔗 **测试环境**: [${deployUrl}](${deployUrl})
            📋 **分支**: \`${branchName}\`
            🎯 **环境**: staging
            
            ### 🧪 测试方法
            \`\`\`bash
            # API健康检查
            curl ${deployUrl}/healthz
            
            # 故事生成测试
            curl -X POST ${deployUrl}/api/generate-story \\
              -H "Content-Type: application/json" \\
              -d '{"topic":"测试故事","maxChoices":3}'
            \`\`\`
            `;
            
            if (deployStatus !== 'success') {
              statusEmoji = '❌';
              statusMessage = '部署失败';
              deploymentInfo = `
              ⚠️ **错误**: 部署过程中遇到问题，请检查工作流日志
              📋 **分支**: \`${branchName}\`
              🎯 **环境**: staging
              `;
            }
            
            const comment = `### ${statusEmoji} 自动部署 - ${statusMessage}
            
            ${deploymentInfo}
            
            ### 📋 部署信息
            - **提交**: ${context.sha.substring(0, 7)}
            - **工作流**: [查看详情](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - **时间**: ${new Date().toISOString()}
            
            ---
            *🤖 由自动部署系统生成*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.prepare.outputs.pr_number }},
              body: comment
            });

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deployStatus = '${{ steps.deploy.outputs.status }}';
            const state = deployStatus === 'success' ? 'success' : 'failure';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: state,
              target_url: '${{ steps.prepare.outputs.deploy_url }}',
              description: `Staging deployment ${state}`,
              environment: 'staging'
            });

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "🧹 清理失败的部署..."
          docker compose -f docker-compose.staging.yml down -v || true
          echo "清理完成"
