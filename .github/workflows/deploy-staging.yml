name: Deploy to Staging

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy to staging'
        required: false
        default: 'master'
        type: string

env:
  STAGING_PORT: 5002
  STAGING_CONTAINER: storyapp-staging
  STAGING_NETWORK: storyapp_storyapp

jobs:
  deploy:
    if: >
      (
        (
          github.event_name == 'workflow_run' &&
          github.event.workflow_run &&
          github.event.workflow_run.conclusion == 'success' &&
          github.event.workflow_run.event == 'pull_request'
        ) ||
        github.event_name == 'workflow_dispatch'
      )
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      deployments: write
      pull-requests: write
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event_name == 'workflow_dispatch' && github.repository || github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.event.workflow_run.head_sha }}

      - name: Collect metadata
        id: meta
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER=""
            BRANCH="${{ github.event.inputs.branch }}"
          else
            PR_NUMBER="${{ github.event.workflow_run.pull_requests[0].number }}"
            BRANCH="${{ github.event.workflow_run.head_branch }}"
          fi
          SAFE_BRANCH=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | cut -c1-40)
          echo "pr=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "safe_branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT

      - name: Validate staging secrets
        id: secrets
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
          KEY: ${{ secrets.STAGING_SSH_KEY }}
          GHCR_TOKEN_PRESENT: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          missing=""
          for var in HOST USER KEY; do
            if [ -z "${!var}" ]; then
              missing="$missing $var"
            fi
          done

          if [ -n "$missing" ]; then
            echo "status=skip" >> $GITHUB_OUTPUT
            echo "message=缺少以下staging密钥:$missing" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ -z "$GHCR_TOKEN_PRESENT" ]; then
            echo "status=skip" >> $GITHUB_OUTPUT
            echo "message=缺少镜像拉取凭据 (GHCR_PAT/GITHUB_TOKEN)" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "status=ready" >> $GITHUB_OUTPUT
          echo "message=" >> $GITHUB_OUTPUT

      - name: Compute image tags
        if: steps.secrets.outputs.status == 'ready'
        id: tags
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SHA="${{ github.sha }}"
          else
            SHA="${{ github.event.workflow_run.head_sha }}"
          fi
          SHORT=$(echo "$SHA" | cut -c1-7)
          echo "sha_short=$SHORT" >> $GITHUB_OUTPUT
          echo "image_tag=sha-$SHORT" >> $GITHUB_OUTPUT
          echo "fallback_tag=latest" >> $GITHUB_OUTPUT

      - name: Prepare staging env file
        if: steps.secrets.outputs.status == 'ready'
        id: envfile
        env:
          DEFAULT_HOST: ${{ secrets.STAGING_HOST }}
          EXPLICIT_BASE_URL: ${{ secrets.STAGING_BASE_URL }}
          DEEPSEEK_KEY: ${{ secrets.STAGING_DEEPSEEK_API_KEY || secrets.DEEPSEEK_API_KEY }}
          MONGO_URI: ${{ secrets.STAGING_MONGO_URI || 'mongodb://mongo:27017/storyapp_staging' }}
        run: |
          set -euo pipefail
          if [ -z "$DEFAULT_HOST" ]; then
            echo "❌ 缺少 STAGING_HOST"
            exit 1
          fi

          BASE_URL="$EXPLICIT_BASE_URL"
          if [ -z "$BASE_URL" ]; then
            BASE_URL="http://$DEFAULT_HOST:${STAGING_PORT}"
          fi

          cat > deploy.env <<EOF
DEEPSEEK_API_KEY=${DEEPSEEK_KEY}
DEEPSEEK_API_URL=https://api.deepseek.com
NODE_ENV=staging
PORT=5000
FRONTEND_URL=${BASE_URL}
MONGODB_URI=${MONGO_URI}
MONGODB_DB_NAME=storyapp_staging
ENABLE_DETAILED_LOGGING=false
LOG_LEVEL=info
STAGING_PR_NUMBER=${{ steps.meta.outputs.pr }}
STAGING_BRANCH=${{ steps.meta.outputs.branch }}
EOF
          echo "env_path=$(pwd)/deploy.env" >> $GITHUB_OUTPUT
          echo "base_url=$BASE_URL" >> $GITHUB_OUTPUT

      - name: Deploy to staging host
        if: steps.secrets.outputs.status == 'ready'
        id: deploy
        env:
          SSH_HOST: ${{ secrets.STAGING_HOST }}
          SSH_USER: ${{ secrets.STAGING_USER }}
          SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          GHCR_TOKEN: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}
          GH_ACTOR: ${{ github.actor }}
          IMAGE_REPO: ghcr.io/${{ github.repository }}
          IMAGE_TAG: ${{ steps.tags.outputs.image_tag }}
          FALLBACK_TAG: ${{ steps.tags.outputs.fallback_tag }}
          ENV_FILE: ${{ steps.envfile.outputs.env_path }}
          BASE_URL: ${{ steps.envfile.outputs.base_url }}
        run: |
          set -euo pipefail

          if [ -z "$SSH_HOST" ] || [ -z "$SSH_USER" ] || [ -z "$SSH_KEY" ]; then
            echo "❌ Staging SSH 配置信息不完整"
            exit 1
          fi

          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

          scp -i ~/.ssh/staging_key -o StrictHostKeyChecking=no "$ENV_FILE" "$SSH_USER"@"$SSH_HOST":/tmp/storyapp-staging.env
          rm -f "$ENV_FILE"

          DEPLOY_STATUS="failure"

          REMOTE_VARS="GHCR_TOKEN=$GHCR_TOKEN IMAGE_REPO=$IMAGE_REPO IMAGE_TAG=$IMAGE_TAG FALLBACK_TAG=$FALLBACK_TAG STAGING_PORT=$STAGING_PORT STAGING_CONTAINER=$STAGING_CONTAINER STAGING_NETWORK=$STAGING_NETWORK GH_ACTOR=$GH_ACTOR"

          if ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no "$SSH_USER"@"$SSH_HOST" "$REMOTE_VARS" 'bash -se' <<'EOSSH'; then
            set -euo pipefail
            cd /root/projects/storyapp

            if [ ! -f "/tmp/storyapp-staging.env" ]; then
              echo "❌ 缺少 staging env 文件"
              exit 1
            fi
            mv /tmp/storyapp-staging.env .env.staging

            echo "📦 登录 GHCR 并拉取镜像"
            if [ -z "$GHCR_TOKEN" ]; then
              echo "❌ 缺少 GHCR_TOKEN" >&2
              exit 1
            fi

            if ! echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GH_ACTOR" --password-stdin; then
              echo "❌ GHCR 登录失败" >&2
              exit 1
            fi

            IMAGE="$IMAGE_REPO:$IMAGE_TAG"
            echo "➡️ 优先拉取镜像 $IMAGE"
            if ! docker pull "$IMAGE"; then
              echo "⚠️ 拉取 $IMAGE 失败，尝试回退标签 $FALLBACK_TAG" >&2
              IMAGE="$IMAGE_REPO:$FALLBACK_TAG"
              docker pull "$IMAGE"
            fi

            echo "🧹 移除旧的 staging 容器"
            docker rm -f "$STAGING_CONTAINER" >/dev/null 2>&1 || true
            docker rm -f points-app >/dev/null 2>&1 || true

            if ! docker network inspect "$STAGING_NETWORK" >/dev/null 2>&1; then
              docker network create "$STAGING_NETWORK"
            fi

            echo "🚀 启动新的 staging 容器"
            docker run -d \
              --name "$STAGING_CONTAINER" \
              --env-file .env.staging \
              --network "$STAGING_NETWORK" \
              --restart unless-stopped \
              -p ${STAGING_PORT}:5000 \
              "$IMAGE"

            CONTAINER_ID=$(docker ps -q --filter "name=^${STAGING_CONTAINER}$")
            echo "🚦 容器 $STAGING_CONTAINER 已启动 (ID: ${CONTAINER_ID:-unknown})"
            docker inspect "$STAGING_CONTAINER" --format 'Image: {{.Image}} | StartedAt: {{.State.StartedAt}}' || true

            echo "⏳ 检查健康状态"
            for i in {1..30}; do
              if curl -fsSL "http://localhost:${STAGING_PORT}/healthz" >/dev/null 2>&1; then
                echo "✅ Staging 已就绪"
                exit 0
              fi
              sleep 5
            done

            echo "❌ Staging 启动超时"
            exit 1
          fi
EOSSH
          then
            DEPLOY_STATUS="success"
          fi
          echo "status=$DEPLOY_STATUS" >> $GITHUB_OUTPUT
          if [ "$DEPLOY_STATUS" = "success" ]; then
            echo "url=$BASE_URL" >> $GITHUB_OUTPUT
          fi

          if [ "$DEPLOY_STATUS" != "success" ]; then
            exit 1
          fi

      - name: Collect staging logs
        if: always()
        env:
          SECRET_STATUS: ${{ steps.secrets.outputs.status || 'skip' }}
          SSH_HOST: ${{ secrets.STAGING_HOST }}
          SSH_USER: ${{ secrets.STAGING_USER }}
          SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          STAGING_CONTAINER: ${{ env.STAGING_CONTAINER }}
          STAGING_PORT: ${{ env.STAGING_PORT }}
        run: |
          if [ "$SECRET_STATUS" != "ready" ]; then
            echo "跳过日志收集：staging密钥未就绪"
            exit 0
          fi
          set -euo pipefail
          mkdir -p ~/.ssh staging-logs
          echo "$SSH_KEY" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

          ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no "$SSH_USER"@"$SSH_HOST" \
            "docker logs $STAGING_CONTAINER --since 30m > /tmp/staging-app.log 2>&1 || true; \
             docker logs storyapp_nginx --since 30m > /tmp/staging-nginx.log 2>&1 || true; \
             docker ps -a > /tmp/staging-ps.txt; \
             docker inspect $STAGING_CONTAINER > /tmp/staging-inspect.json 2>/dev/null || true"

          scp -i ~/.ssh/staging_key -o StrictHostKeyChecking=no "$SSH_USER"@"$SSH_HOST":/tmp/staging-*.log staging-logs/ || true
          scp -i ~/.ssh/staging_key -o StrictHostKeyChecking=no "$SSH_USER"@"$SSH_HOST":/tmp/staging-ps.txt staging-logs/ || true
          scp -i ~/.ssh/staging_key -o StrictHostKeyChecking=no "$SSH_USER"@"$SSH_HOST":/tmp/staging-inspect.json staging-logs/ || true

          ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no "$SSH_USER"@"$SSH_HOST" \
            "rm -f /tmp/staging-app.log /tmp/staging-nginx.log /tmp/staging-ps.txt /tmp/staging-inspect.json"

      - name: Upload staging logs
        if: always() && steps.secrets.outputs.status == 'ready'
        uses: actions/upload-artifact@v4
        with:
          name: staging-logs
          path: staging-logs/
          retention-days: 5

      - name: Comment on PR
        if: always() && steps.meta.outputs.pr != ''
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = Number(process.env.PR_NUMBER);
            const status = process.env.STATUS;
            const secretStatus = process.env.SECRET_STATUS || 'skip';
            const branch = process.env.BRANCH;
            const url = process.env.URL;
            let body;
            if (secretStatus !== 'ready') {
              body = `ℹ️ **Staging 部署被跳过**\n\n原因: ${process.env.SECRET_MESSAGE || '缺少staging密钥或凭据'}\n- 分支: \`${branch}\`\n- 工作流运行: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            } else if (status === 'success' && url) {
              body = `✅ **Staging 部署成功**\n\n- 分支: \`${branch}\`\n- 预览地址: ${url}\n- 工作流运行: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            } else {
              body = `❌ **Staging 部署失败**\n\n请查看运行日志: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body,
            });
        env:
          PR_NUMBER: ${{ steps.meta.outputs.pr }}
          STATUS: ${{ steps.deploy.outputs.status || 'failure' }}
          SECRET_STATUS: ${{ steps.secrets.outputs.status || 'skip' }}
          SECRET_MESSAGE: ${{ steps.secrets.outputs.message || '' }}
          BRANCH: ${{ steps.meta.outputs.branch }}
          URL: ${{ steps.deploy.outputs.url || '' }}

      - name: Record deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const secretStatus = process.env.SECRET_STATUS || 'skip';
            let state;
            if (secretStatus !== 'ready') {
              state = 'inactive';
            } else {
              state = process.env.STATUS === 'success' ? 'success' : 'failure';
            }
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'staging',
              auto_merge: false,
              required_contexts: []
            });
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state,
              target_url: process.env.URL || undefined,
              description: secretStatus !== 'ready' ? 'Staging secrets missing，deployment skipped' : `Staging deployment ${state}`,
              environment: 'staging'
            });
        env:
          STATUS: ${{ steps.deploy.outputs.status || 'failure' }}
          SECRET_STATUS: ${{ steps.secrets.outputs.status || 'skip' }}
          URL: ${{ steps.deploy.outputs.url || '' }}
