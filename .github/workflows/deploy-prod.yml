name: Production Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      run_tests:
        description: 'Run Playwright tests after deployment'
        required: false
        default: true
        type: boolean
      image_tag:
        description: 'Docker image tag to deploy (default: latest)'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup deployment variables
        id: vars
        run: |
          echo "image_tag=${{ inputs.image_tag || 'latest' }}" >> $GITHUB_OUTPUT
          echo "deploy_timestamp=$(date '+%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT

      - name: Deploy to server via SSH
        env:
          SSH_HOST: ${{ secrets.PROD_HOST || secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.PROD_USER || secrets.SSH_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_KEY || secrets.SSH_PRIVATE_KEY }}
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
          MONGO_USER: ${{ secrets.MONGO_USER }}
          MONGO_PASS: ${{ secrets.MONGO_PASS }}
          GHCR_TOKEN: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}
          IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
        run: |
          set -euo pipefail

          if [ -z "$SSH_HOST" ] || [ -z "$SSH_USERNAME" ] || [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "❌ SSH secrets are not fully configured"
            exit 1
          fi

          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

          BASE_URL="$SSH_HOST"
          if [[ "$BASE_URL" != http://* && "$BASE_URL" != https://* ]]; then
            BASE_URL="https://$BASE_URL"
          fi

          if [ -n "$MONGO_USER" ] && [ -n "$MONGO_PASS" ]; then
            MONGO_URI="mongodb://$MONGO_USER:$MONGO_PASS@mongo:27017/storyapp?authSource=admin"
          else
            MONGO_URI="mongodb://mongo:27017/storyapp"
          fi

          {
            printf 'DEEPSEEK_API_KEY=%s\n' "$DEEPSEEK_API_KEY"
            printf 'DEEPSEEK_API_URL=%s\n' "https://api.deepseek.com"
            printf 'MONGODB_URI=%s\n' "$MONGO_URI"
            printf 'MONGODB_DB_NAME=%s\n' "storyapp"
            printf 'NODE_ENV=%s\n' "production"
            printf 'PORT=%s\n' "5000"
            printf 'FRONTEND_URL=%s\n' "$BASE_URL"
            printf 'ENABLE_DETAILED_LOGGING=%s\n' "false"
            printf 'LOG_LEVEL=%s\n' "info"
          } > deploy.env

          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.env $SSH_USERNAME@$SSH_HOST:/tmp/storyapp.env
          rm deploy.env

          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST <<EOF
            set -euo pipefail

            echo "🚀 Starting deployment..."
            cd /root/projects/storyapp || { echo "❌ Project directory not found"; exit 1; }

            mv /tmp/storyapp.env .env

            echo "$GHCR_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            docker pull $REGISTRY/$IMAGE_NAME:$IMAGE_TAG

            docker compose -f docker-compose.yml -f docker-compose.ghcr.yml down || true

            APP_TAG=$IMAGE_TAG docker compose -f docker-compose.yml -f docker-compose.ghcr.yml up -d

            docker image prune -af --filter "until=72h" || true

            echo "✅ Deployment completed"
          EOF

      - name: Wait for service to be healthy
        run: |
          BASE_URL="${{ secrets.PROD_HOST || secrets.SSH_HOST }}"
          if [ -z "$BASE_URL" ]; then
            echo "❌ PROD_HOST/SSH_HOST secret is required for health checks"
            exit 1
          fi
          if [[ "$BASE_URL" != http://* && "$BASE_URL" != https://* ]]; then
            BASE_URL="https://$BASE_URL"
          fi

          echo "⏳ Waiting for service to be healthy..."

          # Wait up to 5 minutes for service to be ready
          timeout 300 bash -c "
            while true; do
              if curl -f ${BASE_URL}/healthz >/dev/null 2>&1; then
                echo '✅ Service is healthy'
                break
              fi
              echo '⏳ Waiting for service...'
              sleep 10
            done
          " || {
            echo "❌ Service health check failed"
            exit 1
          }

      - name: Run Playwright tests
        if: inputs.run_tests
        run: |
          BASE_URL="${{ secrets.PROD_HOST || secrets.SSH_HOST }}"
          if [ -z "$BASE_URL" ]; then
            echo "❌ PROD_HOST/SSH_HOST secret is required for production tests"
            exit 1
          fi
          if [[ "$BASE_URL" != http://* && "$BASE_URL" != https://* ]]; then
            BASE_URL="https://$BASE_URL"
          fi

          echo "🧪 Running production tests..."
          
          # Install Playwright
          npm ci
          npx playwright install --with-deps chromium
          
          # Run production tests
          PLAYWRIGHT_BASE_URL="$BASE_URL" npx playwright test -c playwright.prod.config.ts

      - name: Deployment summary
        if: always()
        run: |
          SUMMARY_URL="${{ secrets.PROD_HOST || secrets.SSH_HOST }}"
          if [[ "$SUMMARY_URL" != http://* && "$SUMMARY_URL" != https://* ]]; then
            SUMMARY_URL="https://$SUMMARY_URL"
          fi

          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ steps.vars.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: ${{ steps.vars.outputs.deploy_timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ inputs.run_tests && '✅ Enabled' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${SUMMARY_URL}" >> $GITHUB_STEP_SUMMARY

