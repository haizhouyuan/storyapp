# FIXME: 已弃用，使用ci.yml替代
# name: CI

# on:
#   push:
#     branches: ["**"]
#     paths-ignore:
#       - "**/*.md"
#       - "docs/**"
#   pull_request:
#     types: [opened, reopened, synchronize, ready_for_review]
    branches: ["**"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fast-checks:
    name: Fast checks (build + backend unit)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (monorepo)
        run: npm ci

      - name: Build shared
        run: npm run build:shared --if-present

      - name: Build backend
        run: npm run build:backend --if-present

      - name: Build frontend
        run: npm run build:frontend --if-present

      - name: Start MongoDB for testing
        run: |
          docker run -d --name mongo-test \
            -p 27017:27017 \
            -e MONGO_INITDB_ROOT_USERNAME=root \
            -e MONGO_INITDB_ROOT_PASSWORD=pass123 \
            -e MONGO_INITDB_DATABASE=storyapp \
            mongo:6.0

      - name: Wait for MongoDB to be ready
        run: |
          timeout 60 bash -c '
            until docker exec mongo-test mongosh \
              --username root \
              --password pass123 \
              --authenticationDatabase admin \
              --quiet \
              --eval "db.runCommand({ ping: 1 }).ok" 2>/dev/null | grep -q 1; do 
              echo "Waiting for MongoDB..."
              sleep 3
            done
            echo "MongoDB is ready!"
          '

      - name: Backend unit tests (Jest)
        env:
          MONGODB_URI: mongodb://root:pass123@localhost:27017/storyapp?authSource=admin
          NODE_ENV: test
        run: |
          cd backend
          npm test -- --ci --maxWorkers=50%

  deep-tests:
    name: Deep tests (Playwright E2E)
    runs-on: ubuntu-latest
    needs: fast-checks
    if: ${{ github.event_name == 'pull_request' && !github.event.pull_request.draft }}
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (monorepo)
        run: npm ci

      - name: Start application services for testing
        run: |
          docker compose -f docker-compose.ci.yml up -d --build
          docker compose -f docker-compose.ci.yml ps

      - name: Wait for services to be healthy
        run: |
          timeout 120 bash -c '
            echo "Waiting for MongoDB to be healthy..."
            until docker compose -f docker-compose.ci.yml ps mongo | grep -q "healthy"; do 
              echo "MongoDB not ready yet..."
              sleep 5
            done
            echo "MongoDB is healthy!"
            
            echo "Waiting for app to be healthy..."
            until docker compose -f docker-compose.ci.yml ps app | grep -q "healthy"; do 
              echo "App not ready yet..."
              docker compose -f docker-compose.ci.yml logs app --tail=10
              sleep 5
            done
            echo "All services are healthy!"
          '

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        env:
          CI: true
        run: npm test

      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 7

      - name: Cleanup Docker containers
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v

