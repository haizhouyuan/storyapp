# Docker网络配置
name: storyapp
networks:
  storyapp:
    driver: bridge

# 数据卷配置
volumes:
  mongo_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local

# 服务配置
services:
  # MongoDB数据库服务
  mongo:
    image: mongo:6.0
    container_name: storyapp_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: storyapp
    ports:
      - "27017:27017"  # 仅开发环境暴露端口
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - storyapp
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 应用服务 - 生产版本
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    image: storyapp:latest
    container_name: storyapp_prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://mongo:27017/storyapp
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - DEEPSEEK_API_URL=${DEEPSEEK_API_URL:-https://api.deepseek.com}
    ports:
      - "5001:5000"
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - storyapp
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 应用服务 - 测试版本（蓝绿部署用）
  app-staging:
    build: 
      context: .
      dockerfile: Dockerfile
    image: storyapp:staging
    container_name: storyapp_staging
    restart: unless-stopped
    environment:
      - NODE_ENV=staging
      - PORT=5000
      - MONGODB_URI=mongodb://mongo:27017/storyapp_staging
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - DEEPSEEK_API_URL=${DEEPSEEK_API_URL:-https://api.deepseek.com}
    ports:
      - "5001:5000"  # 不同端口避免冲突
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - storyapp
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - staging  # 仅在指定profile时启动

  # Nginx反向代理服务
  nginx:
    image: nginx:1.25-alpine
    container_name: storyapp_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    networks:
      - storyapp
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - nginx  # 仅在需要时启动nginx