# 高度优化的多阶段Dockerfile - NPM Workspaces + 构建缓存优化
ARG NODE_IMAGE=node:20-alpine
ARG NPM_REGISTRY=https://registry.npmmirror.com

# ===== 依赖安装阶段 =====
FROM ${NODE_IMAGE} AS deps
WORKDIR /app

# 设置npm配置以优化下载速度
RUN npm config set registry $NPM_REGISTRY && \
    npm config set audit false && \
    npm config set fund false && \
    npm config set update-notifier false

# 复制package文件（优化Docker缓存）
COPY package.json package-lock.json ./
COPY backend/package.json ./backend/package.json
COPY frontend/package.json ./frontend/package.json
COPY shared/package.json ./shared/package.json

# 安装所有依赖（包括开发依赖）
RUN --mount=type=cache,target=/root/.npm \
    npm ci --workspaces --include-workspace-root

# ===== 共享类型构建阶段 =====
FROM deps AS shared-builder
WORKDIR /app

# 只复制shared包源码
COPY shared/ ./shared/

# 构建shared包
RUN npm run -w @storyapp/shared build

# ===== 前端构建阶段 =====
FROM deps AS frontend-builder
WORKDIR /app

# 复制shared构建产物
COPY --from=shared-builder /app/shared/dist ./shared/dist

# 复制前端源码
COPY frontend/ ./frontend/

# 构建前端
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
RUN npm run -w frontend build

# ===== 后端构建阶段 =====
FROM deps AS backend-builder
WORKDIR /app

# 复制shared构建产物
COPY --from=shared-builder /app/shared/dist ./shared/dist

# 复制后端源码
COPY backend/ ./backend/

# 构建后端
RUN npm run -w backend build

# ===== 生产依赖阶段 =====
FROM ${NODE_IMAGE} AS prod-deps
WORKDIR /app

# 设置npm配置
RUN npm config set registry $NPM_REGISTRY && \
    npm config set audit false && \
    npm config set fund false

# 复制package文件
COPY package.json package-lock.json ./
COPY backend/package.json ./backend/package.json
COPY shared/package.json ./shared/package.json

# 只安装生产依赖
RUN --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev --workspaces --include-workspace-root && \
    npm cache clean --force

# ===== 最终生产镜像 =====
FROM ${NODE_IMAGE} AS production

# 安装dumb-init以正确处理信号
RUN apk add --no-cache dumb-init

WORKDIR /app

# 创建非root用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S storyapp -u 1001

# 复制生产依赖
COPY --from=prod-deps --chown=storyapp:nodejs /app/node_modules ./node_modules
COPY --from=prod-deps --chown=storyapp:nodejs /app/package.json ./package.json

# 复制构建产物
COPY --from=shared-builder --chown=storyapp:nodejs /app/shared/dist ./shared/dist
COPY --from=backend-builder --chown=storyapp:nodejs /app/backend/dist ./backend/dist
COPY --from=frontend-builder --chown=storyapp:nodejs /app/frontend/build ./frontend/build

# 复制包配置文件
COPY --chown=storyapp:nodejs backend/package.json ./backend/package.json
COPY --chown=storyapp:nodejs shared/package.json ./shared/package.json

# 创建必要的目录并设置权限
RUN mkdir -p logs uploads tmp && \
    chown -R storyapp:nodejs /app

# 切换到非root用户
USER storyapp

# 设置环境变量
ENV NODE_ENV=production \
    PORT=5000 \
    NODE_OPTIONS="--max-old-space-size=1024" \
    HUSKY=0

# 暴露端口
EXPOSE 5000

# 健康检查（优化超时和重试）
HEALTHCHECK --interval=30s --timeout=3s --start-period=15s --retries=3 \
    CMD node -e "require('http').get('http://127.0.0.1:5000/healthz', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"

# 使用dumb-init启动应用
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "backend/dist/index.js"]

# 元数据标签
LABEL org.opencontainers.image.title="StoryApp" \
      org.opencontainers.image.description="儿童睡前互动故事应用" \
      org.opencontainers.image.vendor="StoryApp Team" \
      org.opencontainers.image.source="https://github.com/yourusername/storyapp"