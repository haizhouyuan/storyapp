name: ClaudeCode Autofix on CI failure

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  autofix:
    if: >
      ${{ github.event.workflow_run.conclusion == 'failure' &&
          github.event.workflow_run.event == 'pull_request' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      ANTHROPIC_BASE_URL: ${{ secrets.ANTHROPIC_BASE_URL }}

    steps:
      - name: Find PR for failing run
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const headBranch = run.head_branch;
            const { data: prs } = await github.rest.pulls.list({ owner, repo, head: `${owner}:${headBranch}`, state: 'open' });
            if (!prs || prs.length === 0) {
              core.setFailed(`No open PR found for branch ${headBranch}`);
              return;
            }
            const pr = prs[0];
            core.setOutput('number', pr.number.toString());
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('base_ref', pr.base.ref);

      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr.outputs.head_ref }}
          fetch-depth: 0

      - name: Run Claude Code to autofix
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          use_sticky_comment: true
          track_progress: true
          prompt: |
            任务：针对当前 PR 的 CI 失败，进行“最小可行修改”的自动修复并推回到同一分支。

            要求：
            - 优先修复编译错误、类型错误、单元测试失败与明显的 ESLint/格式问题。
            - 不进行大范围重构；聚焦根因，尽可能保持改动最小。
            - 如需改动测试，请保证语义正确且能稳定通过。
            - 提交信息使用："claude: autofix"。

            参考：
            - 项目脚本：根 package.json 以及 backend/frontend 下的 build/test/lint 相关脚本。
            - 若有必要，可在本地尝试运行 "npm run -w backend test" 或相应构建脚本以验证改动思路（请最小化尝试）。

            输出：
            - 直接在分支上提交修复；
            - 在 PR 中贴出修复摘要（关键文件/修改点/原因）。

      - name: Fallback commit if changes staged but not committed
        run: |
          if ! git diff --quiet; then
            git config user.email "action@github.com"
            git config user.name "ClaudeCode Autofix"
            git add -A
            git commit -m "claude: autofix"
            git push
          fi

      - name: Post completion note
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt('${{ steps.pr.outputs.number }}'),
              body: `🤖 ClaudeCode Autofix 已执行。状态：${{ job.status }}。`
            });

